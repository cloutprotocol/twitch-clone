// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String?               // Make optional for wallet-only users
  username         String   @unique
  imageUrl         String   @db.String
  externalUserId   String?               // Keep temporarily for migration
  bio              String?  @db.String
  twitterUrl       String?  @db.String
  instagramUrl     String?  @db.String
  tiktokUrl        String?  @db.String
  discordUrl       String?  @db.String
  telegramUrl      String?  @db.String
  twitchUrl        String?  @db.String
  websiteUrl       String?  @db.String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  following        Follow[] @relation(name: "Following")
  followedBy       Follow[] @relation(name: "FollowedBy")
  blocking         Block[]       @relation(name: "Blocking")
  blockedby        Block[]       @relation(name: "BlockedBy")
  stream           Stream?
  chatMessages     ChatMessage[]
  
  // New relations for wallet authentication
  accounts         Account[]
  wallets          Wallet[]
  sessions         Session[]
  whitelistApplications WhitelistApplication[]
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation(name: "Following", fields: [followerId], references: [id])
  followerId  String   @db.ObjectId
  following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @db.ObjectId

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String @db.ObjectId
  blockedId String @db.ObjectId

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id])
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Stream {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  thumbnail           String?
  ingressId           String?       @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean       @default(false)
  isChatEnabled       Boolean       @default(true)
  isChatDelayed       Boolean       @default(false)
  isChatFollowersOnly Boolean       @default(false)
  viewerCount         Int           @default(0)
  tokenAddress        String?       // Solana token contract address
  userId              String        @unique @db.ObjectId
  user                User          @relation(fields: [userId], references: [id])
  chatMessages        ChatMessage[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([isLive, updatedAt])
  @@index([viewerCount])
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  username  String
  userId    String?  @db.ObjectId
  streamId  String   @db.ObjectId
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  @@index([streamId, createdAt])
}

// New models for wallet authentication
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String   // 'oauth', 'credentials', 'siws'
  provider           String   // 'clerk', 'siws', 'email'
  providerAccountId  String   // wallet address, clerk ID, etc.
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Wallet {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain         String   // 'solana'
  address       String   @unique
  label         String?  // 'primary', 'phantom', etc.
  isPrimary     Boolean  @default(false)
  lastVerified  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([chain])
}

model WhitelistApplication {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress   String   @unique
  twitterUrl      String?
  instagramUrl    String?
  tiktokUrl       String?
  discordUrl      String?
  telegramUrl     String?
  websiteUrl      String?
  tokenAddress    String?  // Optional token they want to stream
  streamIdea      String   @db.String
  additionalNotes String?  @db.String
  status          String   @default("pending") // pending, approved, rejected
  userId          String?  @db.ObjectId // If user is logged in when applying
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

